swagger: "2.0"
info:
  description: "Software Engineering Project API"
  version: "1.0.0"
  title: "Shfuggiente SE 2"
host: "shfuggientese2.herokuapp.com"
basePath: "/api/v1"
schemes:
- "https"
consumes:
- application/json
produces:
- application/json
paths:
  /exams:
    post:
      tags:
      - "Exams"
      summary: "Create an Exam"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: "Done"
        400:
          description: "Invalid input"
  /exams/{id}:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      summary: Get exam info with associated groups
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Exam'
    put:
      summary: Edit an exam
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: 'Modified successfully'
    delete:
      summary: Delete an exam
      responses:
        200:
          description: 'Deleted successfully'
  /exams/{id}/submissions:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      summary: Get the submissions' IDs related to a exam
      responses:
        200:
          description: Success
          examples:
            'application/json':
              submissions_ids: [1,54,76,43,87]
    post:
      summary: Create a new submissions for an exam
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        200:
          description: "Done"
        400:
          description: "Invalid input"
  /submissions/{id}:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      tags:
      - "Submissions"
      summary: Get info about submission
      responses:
        200:
          description: "successfull response"
          schema:
            $ref: "#/definitions/Submission"
    put:
      summary: Update submission
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        200:
          description: 'Modified successfully'
    delete:
      summary: delete the Submission
      responses:
        200:
          description: 'Deleted successfully'
  /submissions/{id}/comments:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      summary: Get comments associated with a submission
      responses:
        200:
          description: Successful response
          examples:
            'application/json':
              - comments_ids: [43,765,54,98]
    post:
      summary: Create a comment for this specific submission
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "Done"
        400:
          description: "Invalid input"
  /submissions/{id}/marks:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      summary: Get marks associated to a submission
      responses:
        200:
          description: Successful response
          examples:
            'application/json':
              - marks_ids: [120,45,53,19]
    post:
      summary: Create a mark for this specific submission
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Mark"
      responses:
        200:
          description: "Done"
        400:
          description: "Invalid input"
  /comments/{id}:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      tags:
      - "Comments"
      summary: Get info about comment
      responses:
        200:
          description: "successfull response"
          schema:
            $ref: "#/definitions/Comment"
    put:
      summary: Update comment
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: 'Modified successfully'
    delete:
      summary: delete the Comment
      responses:
        200:
          description: 'Deleted successfully'
  /marks/{id}:
    parameters:
    - name: id
      in: path
      required: true
      type: integer
      minimum: 1
    get:
      tags:
      - "Marks"
      summary: Get info about Mark
      responses:
        200:
          description: "successfull response"
          schema:
            $ref: "#/definitions/Mark"
    put:
      summary: Update Mark
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Mark"
      responses:
        200:
          description: 'Modified successfully'
    delete:
      summary: delete the Mark
      responses:
        200:
          description: 'Deleted successfully'
  /groups:
    get:
      tags:
        - "Groups"
      summary: Get a list of the groups
      responses:
        200:
          description: 'successful response'
          examples:
            'application/json':
              - id: 1
                name: 'group1'
              - id: 2
                name: 'group2'
    post:
      summary: "Create a group"
      parameters:
      - in: "body"
        name: "Group informations"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses:
        200:
          description: "Group created successfully"
        400:
          description: "Error creating group"
  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: integer
        minimum: 1
    get:
      summary: "Get group informations"
      responses:
        200:
          description: "successful response"
          schema:
            $ref: "#/definitions/Group"
    put:
      summary: "Edit group"
      parameters:
      - in: "body"
        name: "Group"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses:
        200:
          description: "Group modified successfully"
    delete:
      summary: "Delete group"
      responses:
        200:
          description: 'Deleted successfully'
  /users:
    get:
      tags:
        - "Users"
      summary: Get a list of the users
      responses:
        200:
          description: 'successful response'
          examples:
            'application/json':
              - id: 1
                name: 'user1'
              - id: 2
                name: 'user2'
    post:
      summary: "Create a user"
      parameters:
      - in: "body"
        name: "User informations"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User created successfully"
        400:
          description: "Error creating user"
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: integer
        minimum: 1
    get:
      summary: "Get user informations"
      responses:
        200:
          description: "successful response"
          schema:
            $ref: "#/definitions/User"
    put:
      summary: "Edit user"
      parameters:
      - in: "body"
        name: "User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User modified successfully"
    delete:
      summary: "Delete user"
      responses:
        200:
          description: 'Deleted successfully'
definitions:
  Submission:
    type: "object"
    required:
    - "userId"
    - "examId"
    - "answers"
    properties:
      userId:
        type: integer
        minimum: 1
        example: 54
      examId:
        type: integer
        minimum: 1
        example: 32
      answers:
        type: array
        example: [123: "nel 1988"]
  Exam:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        minimum: 1
        format: "int64"
      name:
        type: "string"
        example: "Exam 1"
      exercises:
        type: "array"
        example: [1,98,54,78,100]
      groups:
        type: "array"
        example: [34,65,12]
  Comment:
    type: "object"
    required:
    - "message"
    - "user_id"
    - "submission_id"
    properties:
      id:
        type: "integer"
        minimum: 1
        format: "int64"
      message:
        type: "string"
        example: "Comment 1"
      user_id:
        type: "integer"
        minimum: 1
        format: "int64"
      submission_id:
        type: "integer"
        minimum: 1
        format: "int64"
  Mark:
    type: "object"
    required:
    - "mark"
    - "user_id"
    - "submission_id"
    properties:
      id:
        type: "integer"
        minimum: 1
        format: "int64"
      mark:
        type: "integer"
        minimum: 1
        example: "8"
      user_id:
        type: "integer"
        minimum: 1
        format: "int64"
      submission_id:
        type: "integer"
        minimum: 1
        format: "int64"
  Group:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        minimum: 1
        format: "int64"
      name:
        type: "string"
        example: "Group 1"
      members:
        type: "array"
        example: [1,98,54,78,100]
  User:
    type: "object"
    required:
    - "name"
    - "mail"
    - "role"
    properties:
      id:
        type: "integer"
        minimum: 1
        format: "int64"
      name:
        type: "string"
        example: "Name 1"
      surname:
        type: "string"
        example: "Surname 1"
      role:
        type: "string"
        example: "Teacher"
      mail:
        type: "string"
        example: "mail@provider.net"
      groups:
        type: "array"
        example: [34,65,12,6]
externalDocs:
  description: "Find out more about Shfuggiente SE 2"
  url: "https://github.com/Fodark/shfuggiente_se2/wiki"
